# automatically generated by the FlatBuffers compiler, do not modify

# namespace: f141_epics_nt

import flatbuffers

class EpicsPV(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsEpicsPV(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EpicsPV()
        x.Init(buf, n + offset)
        return x

    # EpicsPV
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EpicsPV
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # EpicsPV
    def PvType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # EpicsPV
    def Pv(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # EpicsPV
    def TimeStamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = o + self._tab.Pos
            from .timeStamp_t import timeStamp_t
            obj = timeStamp_t()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # EpicsPV
    def Fwdinfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = o + self._tab.Pos
            from .fwdinfo_t import fwdinfo_t
            obj = fwdinfo_t()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # EpicsPV
    def Fwdinfo2Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # EpicsPV
    def Fwdinfo2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def EpicsPVStart(builder): builder.StartObject(7)
def EpicsPVAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def EpicsPVAddPvType(builder, pvType): builder.PrependUint8Slot(1, pvType, 0)
def EpicsPVAddPv(builder, pv): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(pv), 0)
def EpicsPVAddTimeStamp(builder, timeStamp): builder.PrependStructSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(timeStamp), 0)
def EpicsPVAddFwdinfo(builder, fwdinfo): builder.PrependStructSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(fwdinfo), 0)
def EpicsPVAddFwdinfo2Type(builder, fwdinfo2Type): builder.PrependUint8Slot(5, fwdinfo2Type, 0)
def EpicsPVAddFwdinfo2(builder, fwdinfo2): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(fwdinfo2), 0)
def EpicsPVEnd(builder): return builder.EndObject()
