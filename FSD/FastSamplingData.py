# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FSD

import flatbuffers

class FastSamplingData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFastSamplingData(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FastSamplingData()
        x.Init(buf, n + offset)
        return x

    # FastSamplingData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FastSamplingData
    def Pv(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # FastSamplingData
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # FastSamplingData
    def Dimensions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FastSamplingData
    def DimensionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FastSamplingData
    def DataType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # FastSamplingData
    def Data(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def FastSamplingDataStart(builder): builder.StartObject(5)
def FastSamplingDataAddPv(builder, pv): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(pv), 0)
def FastSamplingDataAddTimestamp(builder, timestamp): builder.PrependUint64Slot(1, timestamp, 0)
def FastSamplingDataAddDimensions(builder, dimensions): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(dimensions), 0)
def FastSamplingDataStartDimensionsVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def FastSamplingDataAddDataType(builder, dataType): builder.PrependUint8Slot(3, dataType, 0)
def FastSamplingDataAddData(builder, data): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)
def FastSamplingDataEnd(builder): return builder.EndObject()
